<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.heb.guitar.mapper.SysUserMapper">
  <resultMap id="BaseResultMap" type="com.heb.guitar.entity.SysUser">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="USERNAME" jdbcType="VARCHAR" property="username" />
    <result column="SALT" jdbcType="VARCHAR" property="salt" />
    <result column="PASSWORD" jdbcType="VARCHAR" property="password" />
    <result column="PHONE" jdbcType="VARCHAR" property="phone" />
    <result column="DEPT_ID" jdbcType="VARCHAR" property="deptId" />
    <result column="REAL_NAME" jdbcType="VARCHAR" property="realName" />
    <result column="NICK_NAME" jdbcType="VARCHAR" property="nickName" />
    <result column="EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="STATUS" jdbcType="TINYINT" property="status" />
    <result column="SEX" jdbcType="TINYINT" property="sex" />
    <result column="DELETED" jdbcType="TINYINT" property="deleted" />
    <result column="CREATE_ID" jdbcType="VARCHAR" property="createId" />
    <result column="UPDATE_ID" jdbcType="VARCHAR" property="updateId" />
    <result column="CREATE_WHERE" jdbcType="TINYINT" property="createWhere" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, USERNAME, SALT, PASSWORD, PHONE, DEPT_ID, REAL_NAME, NICK_NAME, EMAIL, STATUS,
    SEX, DELETED, CREATE_ID, UPDATE_ID, CREATE_WHERE, CREATE_TIME, UPDATE_TIME
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from SYS_USER
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from SYS_USER
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.heb.guitar.entity.SysUser">
    insert into SYS_USER (ID, USERNAME, SALT, 
      PASSWORD, PHONE, DEPT_ID,
      REAL_NAME, NICK_NAME, EMAIL, 
      STATUS, SEX, DELETED,
      CREATE_ID, UPDATE_ID, CREATE_WHERE, 
      CREATE_TIME, UPDATE_TIME)
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{deptId,jdbcType=VARCHAR}, 
      #{realName,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{sex,jdbcType=TINYINT}, #{deleted,jdbcType=TINYINT}, 
      #{createId,jdbcType=VARCHAR}, #{updateId,jdbcType=VARCHAR}, #{createWhere,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.heb.guitar.entity.SysUser">
    insert into SYS_USER
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="username != null">
        USERNAME,
      </if>
      <if test="salt != null">
        SALT,
      </if>
      <if test="password != null">
        PASSWORD,
      </if>
      <if test="phone != null">
        PHONE,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="realName != null">
        REAL_NAME,
      </if>
      <if test="nickName != null">
        NICK_NAME,
      </if>
      <if test="email != null">
        EMAIL,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="sex != null">
        SEX,
      </if>
      <if test="deleted != null">
        DELETED,
      </if>
      <if test="createId != null">
        CREATE_ID,
      </if>
      <if test="updateId != null">
        UPDATE_ID,
      </if>
      <if test="createWhere != null">
        CREATE_WHERE,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=TINYINT},
      </if>
      <if test="createId != null">
        #{createId,jdbcType=VARCHAR},
      </if>
      <if test="updateId != null">
        #{updateId,jdbcType=VARCHAR},
      </if>
      <if test="createWhere != null">
        #{createWhere,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.heb.guitar.entity.SysUser">
    update SYS_USER
    <set>
      <if test="username != null">
        USERNAME = #{username,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        SALT = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        PHONE = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        REAL_NAME = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        NICK_NAME = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=TINYINT},
      </if>
      <if test="sex != null">
        SEX = #{sex,jdbcType=TINYINT},
      </if>
      <if test="deleted != null">
        DELETED = #{deleted,jdbcType=TINYINT},
      </if>
      <if test="createId != null">
        CREATE_ID = #{createId,jdbcType=VARCHAR},
      </if>
      <if test="updateId != null">
        UPDATE_ID = #{updateId,jdbcType=VARCHAR},
      </if>
      <if test="createWhere != null">
        CREATE_WHERE = #{createWhere,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.heb.guitar.entity.SysUser">
    update SYS_USER
    set USERNAME = #{username,jdbcType=VARCHAR},
      SALT = #{salt,jdbcType=VARCHAR},
      PASSWORD = #{password,jdbcType=VARCHAR},
      PHONE = #{phone,jdbcType=VARCHAR},
      DEPT_ID = #{deptId,jdbcType=VARCHAR},
      REAL_NAME = #{realName,jdbcType=VARCHAR},
      NICK_NAME = #{nickName,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=TINYINT},
      SEX = #{sex,jdbcType=TINYINT},
      DELETED = #{deleted,jdbcType=TINYINT},
      CREATE_ID = #{createId,jdbcType=VARCHAR},
      UPDATE_ID = #{updateId,jdbcType=VARCHAR},
      CREATE_WHERE = #{createWhere,jdbcType=TINYINT},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=VARCHAR}
  </update>

  <!-- @Description: 新增用户判断用户名是否重复-->
  <select id="userExist" resultType="int">
    SELECT count(*) as num
    FROM SYS_USER
    WHERE USERNAME = #{username}
    AND DELETED=1
  </select>

  <!-- @Description: 根据用户名获取用户信息-->
  <select id="getUserInfoByName" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"></include>
    FROM SYS_USER
    WHERE USERNAME = #{username}
    AND DELETED=1
  </select>

  <!-- @Description: 查询所有用户-->
  <select id="selectAll" resultMap="BaseResultMap"
          parameterType="com.heb.guitar.vo.req.UserReqVO">
    select
      U.*,
      D.NAME AS deptName
    from SYS_USER U LEFT JOIN SYS_DEPT D ON U.DEPT_ID = D.ID
    <where>
      U.DELETED = 1
      <if test="username!=null and username!=''">
        AND U.USERNAME LIKE concat('%',#{username},'%')
      </if>
      <if test="realName!=null and realName!=''">
        AND U.REAL_NAME LIKE concat('%',#{realName},'%')
      </if>
      <if test="status!=null and status!='' or status==0 ">
        AND U.STATUS = #{status}
      </if>
    </where>
    LIMIT ((${pageNum}-1)*${pageSize}),${pageSize}
  </select>

  <select id="userCount" resultType="long" parameterType="com.heb.guitar.vo.req.UserReqVO">
    select count(1) AS count from SYS_USER
    <where>
      DELETED = 1
      <if test="username!=null and username!=''">
        AND USERNAME LIKE concat('%',#{username},'%')
      </if>
      <if test="realName!=null and realName!=''">
        AND REAL_NAME LIKE concat('%',#{realName},'%')
      </if>
      <if test="status!=null and status!='' or status==0 ">
        AND STATUS = #{status}
      </if>
    </where>
  </select>

  <!-- @Description: 查询组织下所有用户-->
  <select id="selectUserInfoByDeptIds" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"></include>
    FROM SYS_USER
    WHERE DEPT_ID IN
    <foreach collection="list" open="(" close=")" separator="," item="item">
      #{item}
    </foreach>
    AND DELETED = 1
  </select>

</mapper>