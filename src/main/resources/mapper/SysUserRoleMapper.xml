<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.heb.guitar.mapper.SysUserRoleMapper">
  <resultMap id="BaseResultMap" type="com.heb.guitar.entity.SysUserRole">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="USER_ID" jdbcType="VARCHAR" property="userId" />
    <result column="ROLE_ID" jdbcType="VARCHAR" property="roleId" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, USER_ID, ROLE_ID, CREATE_TIME
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from SYS_USER_ROLE
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from SYS_USER_ROLE
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.heb.guitar.entity.SysUserRole">
    insert into SYS_USER_ROLE (ID, USER_ID, ROLE_ID, 
      CREATE_TIME)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.heb.guitar.entity.SysUserRole">
    insert into SYS_USER_ROLE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="roleId != null">
        ROLE_ID,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.heb.guitar.entity.SysUserRole">
    update SYS_USER_ROLE
    <set>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        ROLE_ID = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.heb.guitar.entity.SysUserRole">
    update SYS_USER_ROLE
    set USER_ID = #{userId,jdbcType=VARCHAR},
      ROLE_ID = #{roleId,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=VARCHAR}
  </update>

  <!-- @Description: 根据用户查出角色-->
  <select id="getRoleIdsByUserId" resultType="java.lang.String">
      SELECT ROLE_ID
      from SYS_USER_ROLE
      where USER_ID =#{userId}
  </select>

  <!-- @Description: 删除用户相关角色-->
  <delete id="removeByUserId">
    delete
    from SYS_USER_ROLE
    where USER_ID=#{userId}
  </delete>
  <!-- @Description: 用户新增角色-->
  <insert id="batchUserRole" parameterType="com.heb.guitar.entity.SysUserRole">
    INSERT INTO SYS_USER_ROLE (
    ID,
    ROLE_ID,
    USER_ID,
    CREATE_TIME
    )
    VALUES
    <foreach item="item" collection="list" index="index" separator=",">
      (
      #{item.id},
      #{item.roleId},
      #{item.userId},
      #{item.createTime}
      )
    </foreach>
  </insert>

  <!-- @Description: 获取和该角色集合相关连的用户id-->
  <select id="getUserIdsByRoleIds" resultType="java.lang.String">
    SELECT USER_ID
    FROM SYS_USER_ROLE
    WHERE ROLE_ID IN
    <foreach collection="list" open="(" close=")" separator="," item="item">
      #{item}
    </foreach>
  </select>

  <!-- @Description: 根据角色 id 找到关联的用户id-->
  <select id="getInfoByUserIdByRoleId" resultType="java.lang.String">
    SELECT USER_ID FROM SYS_USER_ROLE WHERE ROLE_ID = #{roleId}
  </select>

  <!-- @Description: 据角色id删除关联数据-->
  <delete id="removeByRoleId">
  DELETE FROM SYS_USER_ROLE WHERE ROLE_ID = #{roleId}
  </delete>


</mapper>